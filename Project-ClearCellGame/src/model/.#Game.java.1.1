package model;

/**
 * This class represents the logic of a game where a board is updated on each
 * step of the game animation. The board can also be updated by selecting a
 * board cell.
 * 
 * @author Dept of Computer Science, UMCP
 */

public abstract class Game {
	protected BoardCell[][] board;

	/**
	 * Defines a board with BoardCell.EMPTY cells.
	 * 
	 * @param maxRows
	 * @param maxCols
	 */
	private int maxCols;
	private int maxRows;
	
	public Game(int maxRows, int maxCols) {
		this.maxCols = maxCols;
		this.maxRows = maxRows;
         this.board = new BoardCell[maxRows][maxCols];
         // init each cell with BoardCell.EMPTY
         
         // loop with respect to y
         for(int directionY = 0; directionY<maxRows; directionY++){
        	 // loop with respect to x 
        	 for(int directionX = 0; directionX < maxCols; directionX++){
        		 // set the cells to the correct value
        		this.board[directionY][directionX] = BoardCell.EMPTY; 
        	 }
         }
	}

	public int getMaxRows() {
		return this.maxRows;
	}

	public int getMaxCols() {
		return this.maxCols;
	}

	public void setBoardCell(int rowIndex, int colIndex, BoardCell boardCell) {
		throw new UnsupportedOperationException();
	}

	public BoardCell getBoardCell(int rowIndex, int colIndex) {
		throw new UnsupportedOperationException();
	}

	/**
	 * Initializes row with the specified color.
	 * @param rowIndex
	 * @param cell
	 */
	public void setRowWithColor(int rowIndex, BoardCell cell) {
	
	}
	
	/**
	 * Initializes column with the specified color.
	 * @param colIndex
	 * @param cell
	 */
	public void setColWithColor(int colIndex, BoardCell cell) {
	
	}
	
	/**
	 * Initializes the board with the specified color.
	 * @param cell
	 */
	public void setBoardWithColor(BoardCell cell) {
	
	}	
	
	public abstract boolean isGameOver();

	public abstract int getScore();

	/**
	 * Advances the animation one step.
	 */
	public abstract void nextAnimationStep();

	/**
	 * Adjust the board state according to the current board state and the
	 * selected cell.
	 * 
	 * @param rowIndex
	 * @param colIndex
	 */
	public abstract void processCell(int rowIndex, int colIndex);
}